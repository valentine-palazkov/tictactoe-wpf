// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18033
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TicTakToe.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Play interactive tic-tac-toe")]
    public partial class PlayInteractiveTic_Tac_ToeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TikTacToe.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Play interactive tic-tac-toe", "\r\nAs I player\r\nI want to train my brain\r\nSo that I can play tic-tak-toe game", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should not be able to replace tic with tak")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void ShouldNotBeAbleToReplaceTicWithTak()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should not be able to replace tic with tak", new string[] {
                        "EmptyBoard"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("gamer puts \'x\' at {0, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When("gamer tries to put \'0\' at {0, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table1.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 11
 testRunner.Then("the board should be:", ((string)(null)), table1, "Then ");
#line 16
  testRunner.And("rule violated should be \'Can not make move at {0, 1} as this move already made\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should allow tac after tic")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void ShouldAllowTacAfterTic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should allow tac after tic", new string[] {
                        "EmptyBoard"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("gamer puts \'x\' at {0, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("gamer tries to put \'0\' at {1, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table2.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "0",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 22
 testRunner.Then("the board should be:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should track move order")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void ShouldTrackMoveOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should track move order", new string[] {
                        "EmptyBoard"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("gamer puts \'x\' at {0, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("gamer tries to put \'x\' at {1, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table3.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 32
 testRunner.Then("the board should be:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should decide what move is next")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void ShouldDecideWhatMoveIsNext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should decide what move is next", new string[] {
                        "EmptyBoard"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("gamer makes a move at {0, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.When("gamer makes a move at {1, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table4.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table4.AddRow(new string[] {
                        "",
                        "0",
                        ""});
            table4.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 42
 testRunner.Then("the board should be:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filled in center horizontal line should complete the game")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void FilledInCenterHorizontalLineShouldCompleteTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filled in center horizontal line should complete the game", new string[] {
                        "EmptyBoard"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table5.AddRow(new string[] {
                        "x",
                        "",
                        "x"});
            table5.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table5.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 50
testRunner.Given("board is:", ((string)(null)), table5, "Given ");
#line 55
 testRunner.When("gamer puts \'x\' at {0, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.Then("the game completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filled in horizontal line should complete the game")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void FilledInHorizontalLineShouldCompleteTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filled in horizontal line should complete the game", new string[] {
                        "EmptyBoard"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table6.AddRow(new string[] {
                        "x",
                        "x",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 60
testRunner.Given("board is:", ((string)(null)), table6, "Given ");
#line 65
 testRunner.When("gamer puts \'x\' at {0, 2}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("the game completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filled diagonal line should complete the game")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void FilledDiagonalLineShouldCompleteTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filled diagonal line should complete the game", new string[] {
                        "EmptyBoard"});
#line 69
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table7.AddRow(new string[] {
                        "x",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table7.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 70
 testRunner.Given("board is:", ((string)(null)), table7, "Given ");
#line 75
 testRunner.When("gamer puts \'x\' at {2, 2}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("the game completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filled in center diagonal line should complete the game")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void FilledInCenterDiagonalLineShouldCompleteTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filled in center diagonal line should complete the game", new string[] {
                        "EmptyBoard"});
#line 79
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table8.AddRow(new string[] {
                        "x",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "",
                        "x"});
#line 80
 testRunner.Given("board is:", ((string)(null)), table8, "Given ");
#line 85
 testRunner.When("gamer puts \'x\' at {1, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
 testRunner.Then("the game completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filled in center vertical line should complete the game")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void FilledInCenterVerticalLineShouldCompleteTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filled in center vertical line should complete the game", new string[] {
                        "EmptyBoard"});
#line 89
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table9.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "x",
                        ""});
#line 90
testRunner.Given("board is:", ((string)(null)), table9, "Given ");
#line 95
 testRunner.When("gamer puts \'x\' at {1, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 96
testRunner.Then("the game completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filled vertical line should complete the game")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void FilledVerticalLineShouldCompleteTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filled vertical line should complete the game", new string[] {
                        "EmptyBoard"});
#line 100
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table10.AddRow(new string[] {
                        "x",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "x",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 101
 testRunner.Given("board is:", ((string)(null)), table10, "Given ");
#line 106
 testRunner.When("gamer puts \'x\' at {2, 0}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.Then("the game completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filled all cells will mean that whole game completed")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void FilledAllCellsWillMeanThatWholeGameCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filled all cells will mean that whole game completed", new string[] {
                        "EmptyBoard"});
#line 110
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table11.AddRow(new string[] {
                        "x",
                        "0",
                        "0"});
            table11.AddRow(new string[] {
                        "0",
                        "x",
                        "x"});
            table11.AddRow(new string[] {
                        "",
                        "0",
                        "0"});
#line 111
 testRunner.Given("board is:", ((string)(null)), table11, "Given ");
#line 116
 testRunner.When("gamer puts \'x\' at {2, 0}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.Then("the game completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Completed game should no allow new movies")]
        [NUnit.Framework.CategoryAttribute("EmptyBoard")]
        public virtual void CompletedGameShouldNoAllowNewMovies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Completed game should no allow new movies", new string[] {
                        "EmptyBoard"});
#line 120
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table12.AddRow(new string[] {
                        "x",
                        "",
                        ""});
            table12.AddRow(new string[] {
                        "x",
                        "",
                        ""});
            table12.AddRow(new string[] {
                        "x",
                        "",
                        ""});
#line 121
 testRunner.Given("board is:", ((string)(null)), table12, "Given ");
#line 126
 testRunner.When("gamer tries to put \'0\' at {0, 1}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "column1",
                        "column2",
                        "column3"});
            table13.AddRow(new string[] {
                        "x",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "x",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "x",
                        "",
                        ""});
#line 127
 testRunner.Then("the board should be:", ((string)(null)), table13, "Then ");
#line 132
  testRunner.And("rule violated should be \'Can not make move at {0, 1} as the game already complete" +
                    "d\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
