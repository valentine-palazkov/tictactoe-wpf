// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TicTakToe.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TicTacToe")]
    public partial class TicTacToeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TikTacToe.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TicTacToe", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should not be able to replace tic with tak")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ShouldNotBeAbleToReplaceTicWithTak()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should not be able to replace tic with tak", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3"});
            table1.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 8
 testRunner.Given("board:", ((string)(null)), table1);
#line 13
        testRunner.And("the last move is at [1, 2]");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3"});
            table2.AddRow(new string[] {
                        "",
                        "0",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 14
 testRunner.When("try to update board with:", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3"});
            table3.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 19
 testRunner.Then("the board should be:", ((string)(null)), table3);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should allow tac after tic")]
        public virtual void ShouldAllowTacAfterTic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should allow tac after tic", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3"});
            table4.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table4.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 26
 testRunner.Given("board:", ((string)(null)), table4);
#line 31
        testRunner.And("the last move is at [1, 2]");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3"});
            table5.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table5.AddRow(new string[] {
                        "",
                        "0",
                        ""});
            table5.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 32
 testRunner.When("try to update board with:", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3"});
            table6.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "0",
                        ""});
            table6.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 37
 testRunner.Then("the board should be:", ((string)(null)), table6);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should track move order")]
        public virtual void ShouldTrackMoveOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should track move order", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3"});
            table7.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table7.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 45
 testRunner.Given("board:", ((string)(null)), table7);
#line 50
        testRunner.And("the last move is at [1, 2]");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3"});
            table8.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 51
 testRunner.When("try to update board with:", ((string)(null)), table8);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3"});
            table9.AddRow(new string[] {
                        "",
                        "x",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "",
                        "",
                        ""});
#line 56
 testRunner.Then("the board should be:", ((string)(null)), table9);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
